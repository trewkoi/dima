@inherits LayoutComponentBase

<MudThemeProvider
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode"
    Theme="Configuration.Theme"/>

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                               OnClick="ToggleDrawer"/>
                Dima
                <MudSpacer/>
                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>
                <MudSwitch Class="ma-4" Color="Color.Inherit" T="bool" ThumbIcon="@Icons.Material.TwoTone.Lightbulb"
                           @bind-Value="_isDarkMode"/>
            </MudAppBar>
            <MudDrawer @bind-Open="@_isDrawerOpen">
                <NavMenu/>
            </MudDrawer>
            <MudMainContent>
                <MudContainer Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>

    <NotAuthorized>
        <LoginRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code

{
    private bool _isDrawerOpen = true;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }
}
